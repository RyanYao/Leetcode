1. Java O(n*n)
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] ret = new int[2];
        for(int i=0; i<numbers.length-1;i++){
            int remain = target-numbers[i];
            for(int j=i+1; j<numbers.length; j++){
                if (numbers[j]==remain){
                    ret[0]=i+1;
                    ret[1]=j+1;
                    return ret;
                }
            }
        }
        return ret;
    }
}

2. java O(n)

//use a HashMap with key of the compliment value of target, value is the index number
    public int[] twoSum(int[] numbers, int target) {
        int[] ret = new int[2];
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i=0; i<numbers.length; i++){
            if(map.containsKey(numbers[i])){
                ret[1]=i+1;
                ret[0]=map.get(numbers[i]);
                return ret;
            }else{
                map.put(target-numbers[i],i+1);
            }
        }
        return ret;
    }

3, Python O(n)
# @return a tuple, (index1, index2)
    def twoSum(self, num, target):
        traversed = {}
        for i in range(0,len(num)):
            if(num[i] in traversed):
                return[traversed[num[i]],i+1]
            else:
                traversed[target-num[i]]=i+1